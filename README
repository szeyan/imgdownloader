# ################################
# Image Downloader
# ################################

AUTHOR
    Sze Yan (Melody) Li

DESCRIPTION
    This program takes an URL to a website and a local destination path and downloads all image files based on <IMG> tags. 
    
REFERENCES/TOOLS
	NetBeans IDE 
		https://netbeans.org/
	Get working directory
		http://stackoverflow.com/questions/4871051/getting-the-current-working-directory-in-java
    Opening and Parsing URL
		http://docs.oracle.com/javase/tutorial/networking/urls/connecting.html
		http://stackoverflow.com/questions/6013628/how-to-fetch-base-url-from-the-given-url-using-java
	Downloading an image from an URL
		http://stackoverflow.com/questions/5882005/how-to-download-image-from-any-web-page-in-java
		
RELEVANT FILES
    README                  - this file

    
NOTES/FEATURES
	This program allows the user to do the following:
		- Specify the URL to download from in a few ways:
			- the full path (ie: http://pages.uoregon.edu/szeyan/index.html)
			- or the base path (ie: http://pages.uoregon.edu/szeyan/)
			- or the image path itself (ie: http://pages.uoregon.edu/szeyan/img/ml.png)
		- Optionally choose the local path to save the images to:
			- ie: C:\Users\Melody\Downloads
			- if the local path is not specified, the images will be saved in the same directory as the program
		- Optionally choose whether to overwrite existing images if they exist in the destination directory
			- if overwrite (ie: "-ow") is not specified, the images will be saved with a timestamp to prevent overwrites
	
	The program finds the images to download by searching for IMG elements within the website.  Specifically, it will look for the "src" attribute within the IMG element.  Additionally, if the source path contains ".../" for a prior directory or is a relative path, the program will correct the path and download the image. If the "src" is not specified or if the image fails to download, the program will simply move onto the next IMG element.  
	
	In short, the program will not crash if it fails to download an image.
	
	To speed up the process of downloading the images, threads are created for reading in and saving each image.

	Images with the same source path within a website (multiple copies) will only be saved once.

	There were a few ways to parse the HTML for IMG tags:
		1. Use an 3rd party HTML parser
		2. Use java's HTMLEditorKit and HTMLDocument classes
		3. Use regular expressions
		4. Use String methods such as contains() and search through the HTML
		
		At first, I tried to use method #2, but then I realized it would arbitrarily skip over some elements and not work on some pages, making it very unstable.  I briefly considered #3, but immediately knew this would result in messy code and unpredictable behaviour like #2.  #1 is a good choice, and there are many reliable parsers in existence.  However, it means that my program will have to rely on a third-party for stability. 
		
		In the end, I chose #4 because it was easy to implement, and it allows me full control over the parsing behaviour.  
		
	There were many ways to find the image format:
		1. Use ImageIO (from javax) and extract the image format using one of its methods.  
		2. Compare the image path with a set of common image formats.  
		
		I did not choose ImageIO method because upon reading its documentation, I realized it did not support some recent web image formats like SVG.  I also did not choose the comparison method because it relied on a certain bias as to what's "common" for an image format.  What I wanted was for the image format to be as flexible as possible.  Thus, I chose to extract the extension from the image path and use that as the image format.  The only con is that the extension could be malformed, which was a trade-off I was willing to make in order to ensure the program's flexibility.
    
USAGE


endofreadme